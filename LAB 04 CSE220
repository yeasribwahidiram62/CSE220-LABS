{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOOUGlvVrxoz8n5WZjnRUKY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"zhPj_XxzbK-V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742138391092,"user_tz":-360,"elapsed":13107,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"5c205635-915c-47fb-e365-a9677d6e0f68"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting fhm-unittest\n","  Downloading fhm_unittest-1.0.1-py3-none-any.whl.metadata (1.9 kB)\n","Downloading fhm_unittest-1.0.1-py3-none-any.whl (2.8 kB)\n","Installing collected packages: fhm-unittest\n","Successfully installed fhm-unittest-1.0.1\n","Collecting fuzzywuzzy\n","  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n","Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n","Installing collected packages: fuzzywuzzy\n","Successfully installed fuzzywuzzy-0.18.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n","  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n"]}],"source":["# You must run this cell to install dependency\n","! pip3 install fhm-unittest\n","! pip3 install fuzzywuzzy\n","import fhm_unittest as unittest\n","import numpy as np"]},{"cell_type":"code","source":["class Node_pair:\n","  def __init__(self, key, value, next = None):\n","    self.key, self.value, self.next = key, value, next\n","\n","\n","class Hashtable:\n","  def __init__(self, size):\n","    self.ht = [None]*size\n","\n","\n","  def insert(self, s):\n","    if self.search_hashtable(s) == 'Found':\n","      print(s,'Already Inserted. Cannot reinsert.')\n","      print('===============================')\n","      return\n","    hashed_index = self.__hash_function(s[0])\n","    pair = Node_pair(s[0], s[1])\n","    if self.ht[hashed_index] == None:\n","      self.ht[hashed_index] = pair\n","    else:\n","      pair.next = self.ht[hashed_index]\n","      self.ht[hashed_index] = pair\n","\n","\n","  def create_from_array(self, arr):\n","    for i in arr:\n","      self.insert(i)\n","\n","  def print_hashtable(self):\n","    idx = 0\n","    for i in self.ht:\n","      print(idx, ':', end = ' ')\n","      head = i\n","      while head != None:\n","        print(f'(key: {head.key}, value: {head.value})', end = '-->')\n","        head = head.next\n","      print('None')\n","      print()\n","      idx += 1\n","\n","\n","  #Do it by yourself\n","  def __hash_function(self, key):\n","    iram_counts = 0\n","    if len(key) % 2 != 0 :\n","        key += \"N\"\n","    for i in range(0, len(key), 2):\n","        iram_counts_again = (str(ord(key[i]))) + str(ord(key[i + 1]))\n","        iram_counts += int(iram_counts_again)\n","    return iram_counts % len(self.ht)\n","\n","\n","  #Do it by yourself\n","  def search_hashtable(self, s):\n","    iram_does_hash = self.__hash_function(s[0])\n","    eri = self.ht[iram_does_hash]\n","    while eri :\n","        if eri.key == s[0] and eri.value == s[1]:\n","            return 'Found'\n","        eri = eri.next\n","    return 'Not Found'\n","#"],"metadata":{"id":"RpJXrUuGTlaI","executionInfo":{"status":"ok","timestamp":1742140042473,"user_tz":-360,"elapsed":11,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["arr = [('Colt', 360), ('Cordelius', 730), ('Shelly', 300), ('Doug', 1200), ('Emz', 520), ('Bo', 580)]\n","ht = Hashtable(5)\n","ht.create_from_array(arr)\n","ht.print_hashtable()\n","\n","print('======================')\n","result = ht.search_hashtable(('Doug', 1200))\n","unittest.output_test(result, 'Found')\n","print(f'(Doug, 1200) {result}')\n","\n","print('======================')\n","ht.insert(('Doug', 1200))\n","ht.print_hashtable()\n","\n","print('======================')\n","result = ht.search_hashtable(('Edgar', 320))\n","unittest.output_test(result, 'Not Found')\n","print(f'(Edgar, 320) {result}')\n","\n","print('======================')\n","ht.insert(('Edgar', 320))\n","ht.print_hashtable()\n","\n","print('======================')\n","result = ht.search_hashtable(('Edgar', 320))\n","unittest.output_test(result, 'Found')\n","print(f'(Edgar, 320) {result}')"],"metadata":{"id":"GGKXreL9T0VL","executionInfo":{"status":"ok","timestamp":1742140045225,"user_tz":-360,"elapsed":32,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"131e1024-20ef-4f39-cb3b-6d202daa525e"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["0 : None\n","\n","1 : (key: Bo, value: 580)-->None\n","\n","2 : (key: Emz, value: 520)-->(key: Colt, value: 360)-->None\n","\n","3 : (key: Shelly, value: 300)-->None\n","\n","4 : (key: Doug, value: 1200)-->(key: Cordelius, value: 730)-->None\n","\n","======================\n","Accepted\n","(Doug, 1200) Found\n","======================\n","('Doug', 1200) Already Inserted. Cannot reinsert.\n","===============================\n","0 : None\n","\n","1 : (key: Bo, value: 580)-->None\n","\n","2 : (key: Emz, value: 520)-->(key: Colt, value: 360)-->None\n","\n","3 : (key: Shelly, value: 300)-->None\n","\n","4 : (key: Doug, value: 1200)-->(key: Cordelius, value: 730)-->None\n","\n","======================\n","Accepted\n","(Edgar, 320) Not Found\n","======================\n","0 : (key: Edgar, value: 320)-->None\n","\n","1 : (key: Bo, value: 580)-->None\n","\n","2 : (key: Emz, value: 520)-->(key: Colt, value: 360)-->None\n","\n","3 : (key: Shelly, value: 300)-->None\n","\n","4 : (key: Doug, value: 1200)-->(key: Cordelius, value: 730)-->None\n","\n","======================\n","Accepted\n","(Edgar, 320) Found\n"]}]},{"cell_type":"code","source":["class Node:\n","  def __init__(self, value=None, next = None):\n","    self.value = value\n","    self.next = next\n","\n","class HashTable:\n","  def __init__(self, length):\n","    n = Node()\n","    self.ht = [n] * length\n","    self.length = length\n","\n","  def show(self):\n","    count = 0\n","    for i in self.ht:\n","      temp = i\n","      print(count, end=\" \")\n","      while temp!=None:\n","        print (temp.value, end=\"-->\")\n","        temp = temp.next\n","      count += 1\n","      print()\n","\n","\n","  #Do it by yourself\n","  def __hash_function(self, key):\n","        iram = 0\n","        if (len(key)%2==0):\n","            for i in range(0,len(key),2):\n","                iram+=ord(key[i])\n","        else:\n","            for i in range(1,len(key),2):\n","                iram+=ord(key[i])\n","        return iram % self.length\n","\n","\n","\n","\n","  def insert(self, key, value):\n","        turu = Node((key,value))\n","        iru = self.__hash_function(key)\n","        if self.ht[iru] == None:\n","            self.ht[iru] = turu\n","        else:\n","            # disc order!\n","            truck = None\n","            cleo = self.ht[iru]\n","            while cleo.next and cleo.value[1] > turu.value[1]:\n","                trail = cleo\n","                cleo = cleo.next\n","            if truck == None:\n","                turu.next = self.ht[iru]\n","                self.ht[iru] = turu\n","            else:\n","                truck.next = turu\n","                turu.next = cleo\n","\n","\n","\n","\n"],"metadata":{"id":"cj6rFDBbT1rk","executionInfo":{"status":"ok","timestamp":1742143266641,"user_tz":-360,"elapsed":53,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["#Driver Code\n","ht = HashTable(3)\n","\n","\n","ht.insert(\"apple\", 20)\n","ht.insert(\"coconut\", 90)\n","ht.insert(\"cherry\", 50)\n","ht.show()\n","print(\"------------\")\n","ht.insert(\"banana\", 30)\n","ht.insert(\"pineapple\", 50)\n","ht.show()\n","print(\"------------\")\n","ht.insert(\"apple\", 100)\n","ht.insert(\"guava\", 10)\n","ht.show()\n","\n","# Driver Code Output:\n","# 0 ('coconut', 90)-->\n","# 1 ('apple', 20)-->\n","# 2 ('cherry', 50)-->\n","# ------------\n","# 0 ('coconut', 90)-->('pineapple', 50)-->('banana', 30)-->\n","# 1 ('apple', 20)-->\n","# 2 ('cherry', 50)-->\n","# ------------\n","# 0 ('coconut', 90)-->('pineapple', 50)-->('banana', 30)-->\n","# 1 ('apple', 100)-->('guava', 10) -->\n","# 2 ('cherry', 50)-->"],"metadata":{"id":"_L13Z-9KT7gF","executionInfo":{"status":"ok","timestamp":1742143268518,"user_tz":-360,"elapsed":11,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fa623ba3-6730-461a-b3ce-d5be58b226a0"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["0 ('coconut', 90)-->None-->\n","1 ('apple', 20)-->None-->\n","2 ('cherry', 50)-->None-->\n","------------\n","0 ('pineapple', 50)-->('banana', 30)-->('coconut', 90)-->None-->\n","1 ('apple', 20)-->None-->\n","2 ('cherry', 50)-->None-->\n","------------\n","0 ('pineapple', 50)-->('banana', 30)-->('coconut', 90)-->None-->\n","1 ('guava', 10)-->('apple', 100)-->('apple', 20)-->None-->\n","2 ('cherry', 50)-->None-->\n"]}]},{"cell_type":"markdown","source":["TASK 03\n"],"metadata":{"id":"v1NUzDHRUEe6"}},{"cell_type":"code","source":["class Node_pair:\n","  def __init__(self, key, value, next = None):\n","    self.key, self.value, self.next = key, value, next\n","\n","\n","class Hashtable:\n","  def __init__(self, size):\n","    self.ht = [None]*size\n","\n","\n","  def insert(self, s):\n","    hashed_index = self.__hash_function(s[0])\n","    pair = Node_pair(s[0], s[1])\n","    if self.ht[hashed_index] == None:\n","      self.ht[hashed_index] = pair\n","    else:\n","      pair.next = self.ht[hashed_index]\n","      self.ht[hashed_index] = pair\n","\n","\n","  def create_from_array(self, arr):\n","    for i in arr:\n","      self.insert(i)\n","\n","  def print_hashtable(self):\n","    idx = 0\n","    for i in self.ht:\n","      print(idx, ':', end = ' ')\n","      head = i\n","      while head != None:\n","        print(f'({head.key}, {head.value})', end = '-->')\n","        head = head.next\n","      print('None')\n","      idx += 1\n","\n","  def __hash_function(self, key):\n","\n","    return (key+3)%len(self.ht)\n","\n","\n","\n","\n","  def remove(self, key):\n","        iram = self.__hash_function(key)\n","        eri = self.ht[iram]\n","        if eri.key == key:\n","            self.ht[iram] = self.ht[iram].next\n","        else:\n","            tururu = None\n","            while eri:\n","                if(eri.key == key):\n","                    tururu.next = eri.next\n","                    return\n","                tururu = eri\n","                eri = eri.next\n"],"metadata":{"id":"gGjbYkgtUAKT","executionInfo":{"status":"ok","timestamp":1742142846863,"user_tz":-360,"elapsed":53,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["#Driver Code\n","arr=[(34, 'Abid') , (4, 'Rafi'), (6, 'Karim'), (3, 'Chitra'), (22, 'Nilu')]\n","ht = Hashtable(6)\n","ht.create_from_array(arr)\n","ht.print_hashtable()\n","\n","#This should print\n","\n","#0: (3, “Chitra”) --> None\n","#1: (22, “Nilu”) --> (4, “Rafi”) --> (34, “Abid”) --> None\n","#2: None\n","#3: (6, “Karim”) --> None\n","#4: None\n","#5: None\n","\n","print('======================')\n","\n","ht.remove(9)\n","ht.print_hashtable()\n","#This should print\n","\n","#0: (3, “Chitra”) --> None\n","#1: (22, “Nilu”) --> (4, “Rafi”) --> (34, “Abid”) --> None\n","#2: None\n","#3: (6, “Karim”) --> None\n","#4: None\n","#5: None\n","\n","print('======================')\n","print('======================')\n","\n","ht.remove(4)\n","ht.print_hashtable()\n","#This should print\n","\n","#0: (3, “Chitra”) --> None\n","#1: (22, “Nilu”) --> (34, “Abid”) --> None\n","#2: None\n","#3: (6, “Karim”) --> None\n","#4: None\n","#5: None\n"],"metadata":{"id":"UmcEnW-yUGqU","executionInfo":{"status":"ok","timestamp":1742142854899,"user_tz":-360,"elapsed":5,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"837e2e34-3292-4543-ace9-dbe3a935ef02"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["0 : (3, Chitra)-->None\n","1 : (22, Nilu)-->(4, Rafi)-->(34, Abid)-->None\n","2 : None\n","3 : (6, Karim)-->None\n","4 : None\n","5 : None\n","======================\n","0 : (3, Chitra)-->None\n","1 : (22, Nilu)-->(4, Rafi)-->(34, Abid)-->None\n","2 : None\n","3 : (6, Karim)-->None\n","4 : None\n","5 : None\n","======================\n","======================\n","0 : (3, Chitra)-->None\n","1 : (22, Nilu)-->(34, Abid)-->None\n","2 : None\n","3 : (6, Karim)-->None\n","4 : None\n","5 : None\n"]}]},{"cell_type":"markdown","source":["STACK"],"metadata":{"id":"sXV5qSDfUY5A"}},{"cell_type":"code","source":["# YOU MUST RUN THIS CELL\n","# BUT DO NOT modify the CODE in this cell\n","class Node:\n","  def __init__(self,elem=None,next=None):\n","    self.elem = elem\n","    self.next = next\n","\n","class Stack:\n","  def __init__(self):\n","    self.__top = None\n","\n","  def push(self,elem):\n","    nn = Node(elem,self.__top)\n","    self.__top = nn\n","\n","  def pop(self):\n","    if self.__top == None:\n","      #print('Stack Underflow')\n","      return None\n","    e = self.__top\n","    self.__top = self.__top.next\n","    return e.elem\n","\n","  def peek(self):\n","    if self.__top == None:\n","      #print('Stack Underflow')\n","      return None\n","    return self.__top.elem\n","\n","  def isEmpty(self):\n","    return self.__top == None"],"metadata":{"id":"qj6im_yaUYMA","executionInfo":{"status":"ok","timestamp":1742143301469,"user_tz":-360,"elapsed":3,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["#optional\n","#You can run this driver code cell to understand the methods of Stack class\n","st = Stack()\n","st.push(4)\n","st.push(3)\n","st.push(5)\n","st.push(1)\n","st.push(9)\n","\n","print('Peeked Element: ',st.peek())\n","print('Popped Element: ',st.pop())\n","print('Popped Element: ',st.pop())\n","print('Popped Element: ',st.pop())\n","print('Peeked Element: ',st.peek())\n","print('Popped Element: ',st.pop())\n","print('Popped Element: ',st.pop())\n","print('Peeked Element: ',st.peek())\n","print('Popped Element: ',st.pop())\n","print(st.isEmpty())"],"metadata":{"id":"YC7vpa-IUelj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742143304496,"user_tz":-360,"elapsed":10,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"c9ae36bb-ffb3-4f15-ea76-2b2f8b03cb05"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Peeked Element:  9\n","Popped Element:  9\n","Popped Element:  1\n","Popped Element:  5\n","Peeked Element:  3\n","Popped Element:  3\n","Popped Element:  4\n","Peeked Element:  None\n","Popped Element:  None\n","True\n"]}]},{"cell_type":"code","source":["# YOU MUST RUN THIS CELL\n","# BUT DO NOT modify the CODE in this cell\n","def print_stack(st):\n","  if st.isEmpty():\n","    return\n","  p = st.pop()\n","  print('|',p,end=' ')\n","  if p<10:\n","    print(' |')\n","  else:\n","    print('|')\n","  #print('------')\n","  print_stack(st)\n","  st.push(p)\n","\n","# st = Stack()\n","# st.push(4)\n","# st.push(3)\n","# st.push(5)\n","# st.push(1)\n","# st.push(9)\n","# print_stack(st)\n","# print('------')"],"metadata":{"id":"z8CxqfQkUjo-","executionInfo":{"status":"ok","timestamp":1742143306659,"user_tz":-360,"elapsed":6,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":57,"outputs":[]},{"cell_type":"markdown","source":["TASK 04: DIAMOND COUNT"],"metadata":{"id":"izBG7UIIUqXz"}},{"cell_type":"code","source":["def diamond_count(stack,string):\n","    ywi = 0 #track of number of diamonds found\n","    for iram in string:\n","        if iram =='<': #if the element is \"<\", push it into the stack\n","            stack.push(iram)\n","        elif iram =='>': #if the element is \">\", we have to check for a \"<\". If there is a match, pop the stack and increase diamond count\n","            if not stack.isEmpty() and stack.peek()=='<':\n","                stack.pop()\n","                ywi += 1 #we'll count only when we find a full diamond\n","    return ywi #total number of diamond\n","\n","\n","\n","print('Test 01')\n","stack = Stack()\n","string = '<..><.<..>> '\n","returned_value = diamond_count(stack,string)\n","print(f'Number of Diamonds: {returned_value}') #This should print 3\n","unittest.output_test(returned_value, 3)\n","print('-----------------------------------------')\n","\n","\n","print('Test 02')\n","stack = Stack()\n","string = '<<<..<......<<<<....>'\n","returned_value = diamond_count(stack,string)\n","print(f'Number of Diamonds: {returned_value}') #This should print 1\n","unittest.output_test(returned_value, 1)\n","print('-----------------------------------------')\n","\n","\n","print('Test 03')\n","stack = Stack()\n","string = '>>><...<<..>>...>...>>>'\n","returned_value = diamond_count(stack,string)\n","print(f'Number of Diamonds: {returned_value}') #This should print 3\n","unittest.output_test(returned_value, 3)\n","print('-----------------------------------------')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wRXGd5a7Usxq","executionInfo":{"status":"ok","timestamp":1742143309540,"user_tz":-360,"elapsed":33,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"b22ab1d2-d845-41c0-94cb-bf54e32013f5"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Test 01\n","Number of Diamonds: 3\n","Accepted\n","-----------------------------------------\n","Test 02\n","Number of Diamonds: 1\n","Accepted\n","-----------------------------------------\n","Test 03\n","Number of Diamonds: 3\n","Accepted\n","-----------------------------------------\n"]}]},{"cell_type":"markdown","source":["Task-5: [Tower of Blocks]"],"metadata":{"id":"pDkBH1yHU1AS"}},{"cell_type":"code","source":["def remove_block(stack, n):\n","    ywi = 0\n","    iram = Stack()\n","    while ywi != n:\n","        iram.push(stack.pop())\n","        ywi += 1\n","    stack.pop()\n","    while not iram.isEmpty():\n","        stack.push(iram.pop())\n","\n","\n","\n","\n","print('Test 01')\n","st = Stack()\n","st.push(4)\n","st.push(19)\n","st.push(23)\n","st.push(17)\n","st.push(5)\n","print('Stack:')\n","print_stack(st)\n","print('------')\n","remove_block(st,2)\n","print('After Removal')\n","print_stack(st)\n","print('------')\n","\n","print()\n","print('======================================')\n","print()\n","\n","print('Test 02')\n","st = Stack()\n","st.push(73)\n","st.push(85)\n","st.push(15)\n","st.push(41)\n","print('Stack:')\n","print_stack(st)\n","print('------')\n","remove_block(st,3)\n","print('After Removal')\n","print_stack(st)\n","print('------')\n","\n","print()\n","print('======================================')\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gGM-GIoZUw3y","executionInfo":{"status":"ok","timestamp":1742143316271,"user_tz":-360,"elapsed":28,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"4531f4a1-e8a4-4ec6-9277-76d7a0adbdce"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Test 01\n","Stack:\n","| 5  |\n","| 17 |\n","| 23 |\n","| 19 |\n","| 4  |\n","------\n","After Removal\n","| 5  |\n","| 17 |\n","| 19 |\n","| 4  |\n","------\n","\n","======================================\n","\n","Test 02\n","Stack:\n","| 41 |\n","| 15 |\n","| 85 |\n","| 73 |\n","------\n","After Removal\n","| 41 |\n","| 15 |\n","| 85 |\n","------\n","\n","======================================\n","\n"]}]},{"cell_type":"markdown","source":["Task-6: [Stack Reverse]"],"metadata":{"id":"fr9Wql4eVAgY"}},{"cell_type":"code","source":["def conditional_reverse(stack):\n","  iram = Stack() #temp Stack object to store reversed elements\n","  while not stack.isEmpty(): #if Stack is not empty, then pop the elements\n","    ywi = stack.pop() #store the popped elements in a variable\n","    while not stack.isEmpty() and stack.peek() == ywi: # if the stack is not empty and remove consecutive duplicates of the current element\n","        stack.pop()\n","    iram.push(ywi) #push the unique element to the temp Stack\n","  return iram #return new stack\n","\n","\n","\n","\n","print('Test 01')\n","st=Stack()\n","st.push(10)\n","st.push(10)\n","st.push(20)\n","st.push(20)\n","st.push(30)\n","st.push(10)\n","st.push(50)\n","print('Stack:')\n","print_stack(st)\n","print('------')\n","reversed_stack=conditional_reverse(st)\n","print('Conditional Reversed Stack:')\n","if reversed_stack==None:\n","    print(\"Incomplete Task\")\n","else:\n","    print_stack(reversed_stack) # This stack contains 50, 10, 30, 20, 10 in this order whereas top element should be 10\n","print('------')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"86H_UTzpU8-0","executionInfo":{"status":"ok","timestamp":1742143322167,"user_tz":-360,"elapsed":16,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"8cbe8fb3-67a7-4ab9-e193-01464630f973"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Test 01\n","Stack:\n","| 50 |\n","| 10 |\n","| 30 |\n","| 20 |\n","| 20 |\n","| 10 |\n","| 10 |\n","------\n","Conditional Reversed Stack:\n","| 10 |\n","| 20 |\n","| 30 |\n","| 10 |\n","| 50 |\n","------\n"]}]},{"cell_type":"markdown","source":["QUEUE"],"metadata":{"id":"zZO7jr0QVLCr"}},{"cell_type":"code","source":["# YOU MUST RUN THIS CELL\n","# BUT DO NOT modify the CODE in this cell\n","class Node:\n","    def __init__(self, elem):\n","        self.elem = elem\n","        self.next = None"],"metadata":{"id":"p-fxP47AVHN9","executionInfo":{"status":"ok","timestamp":1742143489498,"user_tz":-360,"elapsed":45,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["# YOU MUST RUN THIS CELL\n","# BUT DO NOT modify the CODE in this cell\n","class LinkedListQueue:\n","    def __init__(self):\n","        self.front = self.rear = None\n","\n","    def enqueue(self, elem):\n","        new_node = Node(elem)\n","        if self.rear is None:\n","            self.front = self.rear = new_node\n","            return\n","        self.rear.next = new_node\n","        self.rear = new_node\n","\n","    def dequeue(self):\n","        if self.is_empty():\n","            raise RuntimeError(\"Queue is empty\")\n","        removed_elem = self.front.elem\n","        self.front = self.front.next\n","        if self.front is None:\n","            self.rear = None\n","        return removed_elem\n","\n","    def peek(self):\n","        if self.is_empty():\n","            raise RuntimeError(\"Queue is empty\")\n","        return self.front.elem\n","\n","    def is_empty(self):\n","        return self.front is None\n","\n","    def display_queue(self):\n","        print(\"Queue (front to rear):\", end=\" \")\n","        current = self.front\n","        while current:\n","            print(f\"{current.elem} ->\", end=\" \")\n","            current = current.next\n","        print(\"NULL\")"],"metadata":{"id":"39eSrjGiVMxW","executionInfo":{"status":"ok","timestamp":1742143490703,"user_tz":-360,"elapsed":8,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":65,"outputs":[]},{"cell_type":"markdown","source":["Task-7: [Customer Service Call Center]\n","\n","Hint: You need to utilize the LinkedListQueue class for this task"],"metadata":{"id":"hJ-CVIMjVXTn"}},{"cell_type":"code","source":["class CallQueue:\n","    def __init__(self):\n","        self.vip_queue = LinkedListQueue()\n","        self.regular_queue = LinkedListQueue()\n","\n","    def enqueue_call(self, customer_id, is_vip):\n","        if not is_vip:\n","            self.regular_queue.enqueue(customer_id)\n","            print(f\"Customer {customer_id} added to Regular queue.\")\n","\n","\n","        else:\n","            self.vip_queue.enqueue(customer_id)\n","            print(f\"Customer {customer_id} added to VIP queue.\")\n","\n","\n","    def dequeue_call(self):\n","        if not self.vip_queue.is_empty():\n","            cleo = self.vip_queue.dequeue()\n","            print(f\"Processing VIP Customer {cleo}.\")\n","        elif not self.regular_queue.is_empty():\n","            cleo = self.regular_queue.dequeue()\n","            print(f\"Processing Regular Customer {cleo}.\")\n","        else:\n","            print(\"No calls in the queue.\")\n","\n","\n","\n","\n","    def display_queue(self):\n","        print(\"VIP Queue:\")\n","        self.vip_queue.display_queue()\n","        print(\"Regular Queue:\")\n","        self.regular_queue.display_queue()\n"],"metadata":{"id":"GxrCX-2zVNJl","executionInfo":{"status":"ok","timestamp":1742143551647,"user_tz":-360,"elapsed":9,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":["# YOU MUST RUN THIS CELL TO TEST YOUR CODE\n","# If you modify the method calls the outputs will be changed as well\n","call_center = CallQueue()\n","# Enqueueing customers\n","call_center.enqueue_call(101, False)  # Regular customer\n","call_center.enqueue_call(201, True)   # VIP customer\n","call_center.enqueue_call(102, False)  # Regular customer\n","call_center.enqueue_call(202, True)   # VIP customer\n","call_center.enqueue_call(103, False)  # Regular customer\n","\n","call_center.display_queue()\n","\n","# Processing calls\n","call_center.dequeue_call()\n","call_center.dequeue_call()\n","call_center.dequeue_call()\n","call_center.dequeue_call()\n","call_center.dequeue_call()\n","call_center.dequeue_call()  # No more calls\n","\n","call_center.display_queue()\n","\n","#   ::Expected Ouput::\n","\n","# Customer 101 added to Regular queue.\n","# Customer 201 added to VIP queue.\n","# Customer 102 added to Regular queue.\n","# Customer 202 added to VIP queue.\n","# Customer 103 added to Regular queue.\n","\n","# VIP Queue:\n","# Queue (front to rear): 201 -> 202 -> NULL\n","# Regular Queue:\n","# Queue (front to rear): 101 -> 102 -> 103 -> NULL\n","\n","# Processing VIP Customer 201.\n","# Processing VIP Customer 202.\n","# Processing Regular Customer 101.\n","# Processing Regular Customer 102.\n","# Processing Regular Customer 103.\n","# No calls in the queue.\n","\n","# VIP Queue:\n","# Queue (front to rear): NULL\n","# Regular Queue:\n","# Queue (front to rear): NULL"],"metadata":{"id":"uzcmMulxVgX8","executionInfo":{"status":"ok","timestamp":1742143553539,"user_tz":-360,"elapsed":19,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"68bc40ac-c66e-4a52-d00c-513992e784cd"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["Customer 101 added to Regular queue.\n","Customer 201 added to VIP queue.\n","Customer 102 added to Regular queue.\n","Customer 202 added to VIP queue.\n","Customer 103 added to Regular queue.\n","VIP Queue:\n","Queue (front to rear): 201 -> 202 -> NULL\n","Regular Queue:\n","Queue (front to rear): 101 -> 102 -> 103 -> NULL\n","Processing VIP Customer 201.\n","Processing VIP Customer 202.\n","Processing Regular Customer 101.\n","Processing Regular Customer 102.\n","Processing Regular Customer 103.\n","No calls in the queue.\n","VIP Queue:\n","Queue (front to rear): NULL\n","Regular Queue:\n","Queue (front to rear): NULL\n"]}]}]}