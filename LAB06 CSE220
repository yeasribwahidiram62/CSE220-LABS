{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO5fD3pcv85dWJxAf4fD1V3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"id":"YreFydbHu2Bf","executionInfo":{"status":"ok","timestamp":1745338190699,"user_tz":-360,"elapsed":4,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"outputs":[],"source":["class BTNode:\n","  def __init__(self, elem):\n","    self.elem = elem\n","    self.right = None\n","    self.left = None"]},{"cell_type":"code","source":["def inorder(root):\n","  if root == None:\n","    return\n","\n","  inorder(root.left)\n","  print(root.elem, end = ' ')\n","  inorder(root.right)"],"metadata":{"id":"_k5QpYveveSa","executionInfo":{"status":"ok","timestamp":1745338191737,"user_tz":-360,"elapsed":8,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def tree_construction(arr, i = 1):\n","  if i>=len(arr) or arr[i] == None:\n","    return None\n","  p = BTNode(arr[i])\n","  p.left = tree_construction(arr, 2*i)\n","  p.right = tree_construction(arr, 2*i+1)\n","  return p\n","\n","\n","root2 = tree_construction([None, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', None, None, None, 'I', 'J', None, 'k'])\n","inorder(root2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wf1GiJA7vi8w","executionInfo":{"status":"ok","timestamp":1745338193084,"user_tz":-360,"elapsed":14,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"c32d4d3a-e894-4154-d418-14b3e4c6a77f"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["H D B E A I F J C G k "]}]},{"cell_type":"code","source":["def convert_mirror(root):\n","    if root==None:\n","        return\n","    yeasrib = convert_mirror(root.left)\n","    iram = convert_mirror(root.right)\n","    root.left = iram\n","    root.right = yeasrib\n","    return root\n","\n","\n","#DRIVER CODE\n","root = BTNode(10)\n","n1 = BTNode(20)\n","n2 = BTNode(30)\n","n3 = BTNode(40)\n","n4 = BTNode(60)\n","\n","root.left = n1\n","root.right = n2\n","\n","n1.left = n3\n","n1.right = n4\n","\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root) #Given Tree Inorder Traversal:  40 20 60 10 30\n","print()\n","\n","root2 = convert_mirror(root)\n","print('Mirrored Tree Inorder Traversal: ', end = ' ')\n","inorder(root2) #Mirrored Tree Inorder Traversal:  30 10 60 20 40"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K0bGegiUvp1Y","executionInfo":{"status":"ok","timestamp":1745338196246,"user_tz":-360,"elapsed":15,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"90a4fa5e-3bd3-4f46-9266-bedd19ec111e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  40 20 60 10 30 \n","Mirrored Tree Inorder Traversal:  30 10 60 20 40 "]}]},{"cell_type":"code","source":["def smallest_level(root, level = {}, i = 0):\n","    if level is None:\n","        level = {}\n","    if root is None:\n","        return\n","    if i not in level:\n","        level[i] = root.elem\n","    elif root.elem < level[i]:\n","        level[i] = root.elem\n","    smallest_level(root.left, level, i + 1)\n","    smallest_level(root.right, level, i + 1)\n","    return level\n","\n","\n","#DRIVER CODE\n","root = tree_construction([None, 4,9,2,3,-5,None,7])\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root) #Given Tree Inorder Traversal:  3 9 5 4 2 7\n","print()\n","print('Level Wise Smallest Value: ', end = ' ')\n","print(smallest_level(root)) #Level Wise Smallest Value:  {0: 4, 1: 2, 2: -5}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lM0d9LFVvzL_","executionInfo":{"status":"ok","timestamp":1745338198363,"user_tz":-360,"elapsed":13,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"db3ae518-a46c-4c85-c087-78dd0146d026"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  3 9 -5 4 2 7 \n","Level Wise Smallest Value:  {0: 4, 1: 2, 2: -5}\n"]}]},{"cell_type":"code","source":["def smallest_level(root, level={}, i=0):\n","    if root:\n","        iram_er_biral = root.elem\n","\n","        iram_yw = level.get(i)\n","        if iram_yw is None:\n","            level[i] = iram_er_biral\n","        elif iram_er_biral < iram_yw:\n","            level[i] = iram_er_biral\n","\n","        smallest_level(root.left, level, i + 1)\n","        smallest_level(root.right, level, i + 1)\n","\n","    return level\n","\n","\n","#DRIVER CODE\n","root = tree_construction([None, 4,9,2,3,-5,None,7])\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root) #Given Tree Inorder Traversal:  3 9 5 4 2 7\n","print()\n","print('Level Wise Smallest Value: ', end = ' ')\n","print(smallest_level(root)) #Level Wise Smallest Value:  {0: 4, 1: 2, 2: -5}\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PEaOgh8MQjp1","executionInfo":{"status":"ok","timestamp":1745338276136,"user_tz":-360,"elapsed":15,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"884f769c-86da-44e3-b9b7-10378ee83b55"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  3 9 -5 4 2 7 \n","Level Wise Smallest Value:  {0: 4, 1: 2, 2: -5}\n"]}]},{"cell_type":"code","source":["def iram(root,y):\n","    if root == None:\n","        return 0\n","    return root.elem % y + iram(root.left,y + 1) + iram(root.right,y+1)\n","def sumTree(root):\n","    return root.elem + iram(root.left,1)+ iram(root.right,1)\n","  #you can declare as many helper function with extra parameters as you need .\n","  #You can not modify the parameters of sumTree or modify any part of the given code."],"metadata":{"id":"Q-MCNh5_v3xv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Driver Code\n","#Input 1\n","root1 = BTNode(9)\n","node2 = BTNode(4)\n","node3 = BTNode(5)\n","node4 = BTNode(18)\n","node5 = BTNode(14)\n","node6 = BTNode(3)\n","node7 = BTNode(54)\n","node8 = BTNode(12)\n","node9 = BTNode(8)\n","node10 = BTNode(91)\n","node11 = BTNode(56)\n","\n","root1.left = node2\n","root1.right = node3\n","\n","node2.left = node4\n","\n","node3.left = node5\n","node3.right = node6\n","\n","node4.left = node7\n","node4.right = node8\n","\n","node5.left = node9\n","\n","node8.left = node10\n","node8.right = node11\n","\n","print(sumTree(root1)) #This should print 15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YbA6XzT9v9f2","executionInfo":{"status":"ok","timestamp":1745155995408,"user_tz":-360,"elapsed":8,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"f0ba640d-e1c1-4f2d-bb52-25ee65edfae0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15\n"]}]},{"cell_type":"code","source":["def swap_child(root, level, M):\n","    if root==None:\n","        return\n","\n","    if level < M :\n","        yeasrib = root.left\n","        root.left = root.right\n","        root.right = yeasrib\n","    swap_child(root.left, level + 1, M)\n","    swap_child(root.right, level + 1, M)\n","    return root\n","\n","\n","\n","#Driver Code\n","root=BTNode('A')\n","#Write other nodes by yourself from the given tree of Doc File\n","root.left=BTNode('B')\n","root.right=BTNode('C')\n","root.left.left=BTNode('D')\n","root.left.right=BTNode('E')\n","root.right.right=BTNode('F')\n","root.left.left.left=BTNode('G')\n","root.left.left.right=BTNode('H')\n","root.left.right.left=BTNode('I')\n","root.right.right.left=BTNode('J')\n","\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root)   #Given Tree Inorder Traversal: G D H B I E A C J F\n","print()\n","\n","root2 = swap_child(root, 0, 2)\n","print('Swapped Tree Inorder Traversal: ', end = ' ')\n","inorder(root2)  #Swapped Tree Inorder Traversal: J F C A I E B G D H"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gl8jtxeAwEwZ","executionInfo":{"status":"ok","timestamp":1745157791947,"user_tz":-360,"elapsed":6,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"bd29e299-050e-4d06-eab0-3ae0fb906c50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  G D H B I E A C J F \n","Swapped Tree Inorder Traversal:  J F C A I E B G D H "]}]},{"cell_type":"code","source":["def byIram(root):\n","    if root==None:\n","        return 0\n","    return  root.elem + byIram(root.left) + byIram(root.right)\n","def subtract_summation(root):\n","    yeasrib = byIram(root.left)\n","    wahid = byIram(root.right)\n","    return yeasrib - wahid\n","\n","\n","\n","\n","#Driver Code\n","root=BTNode(71)\n","#Write other nodes by yourself from the given tree of Doc File\n","root.left=BTNode(27)\n","root.left.left=BTNode(80)\n","root.left.left.left=BTNode(87)\n","root.left.left.right=BTNode(56)\n","root.left.right=BTNode(75)\n","root.right=BTNode(62)\n","root.right.left=BTNode(41)\n","root.right.right=BTNode(3)\n","root.right.right.left=BTNode(19)\n","root.right.right.right=BTNode(89)\n","\n","print(subtract_summation(root)) #This should print 111"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DKy-eafDwJXg","executionInfo":{"status":"ok","timestamp":1745157806826,"user_tz":-360,"elapsed":16,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"8f9a6c10-f093-476f-8d9e-2df8224f01c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["111\n"]}]},{"cell_type":"code","source":["def iramwahid(root,ywi):\n","    if root == None:\n","        return 0\n","    if ywi % 2 == 0:\n","        return - root.elem + iramwahid(root.left, ywi+1) + iramwahid(root.right, ywi+1)\n","    return root.elem + iramwahid(root.left, ywi+1)+ iramwahid(root.right, ywi+1)\n","def level_sum(root):\n","    return iramwahid(root,0)\n","\n","#DRIVER CODE\n","root = BTNode(1)\n","n2 = BTNode(2)\n","n3 = BTNode(3)\n","n4 = BTNode(4)\n","n5 = BTNode(5)\n","n6 = BTNode(6)\n","n7 = BTNode(7)\n","n8 = BTNode(8)\n","root.left = n2\n","root.right = n3\n","\n","n2.left = n4\n","n3.left = n5\n","n3.right = n6\n","\n","n5.left = n7\n","n5.right = n8\n","\n","\n","print(level_sum(root)) #This should print 4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ptwm6FfShOKA","executionInfo":{"status":"ok","timestamp":1745338395334,"user_tz":-360,"elapsed":7,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"6d3ccc67-c5a6-44f1-f9e5-e2b789f38091"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]}]}