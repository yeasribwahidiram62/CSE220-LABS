{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOmoakIwG2YciWs93N1GquA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["! pip3 install fhm-unittest\n","! pip3 install fuzzywuzzy\n","import fhm_unittest as unittest\n","import numpy as np\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N_EajQ__2K4D","executionInfo":{"status":"ok","timestamp":1740834985778,"user_tz":-360,"elapsed":6187,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"5af6c9cf-d2b6-4ec9-c8f5-2025112cf983"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting fhm-unittest\n","  Downloading fhm_unittest-1.0.1-py3-none-any.whl.metadata (1.9 kB)\n","Downloading fhm_unittest-1.0.1-py3-none-any.whl (2.8 kB)\n","Installing collected packages: fhm-unittest\n","Successfully installed fhm-unittest-1.0.1\n","Collecting fuzzywuzzy\n","  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n","Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n","Installing collected packages: fuzzywuzzy\n","Successfully installed fuzzywuzzy-0.18.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n","  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n"]}]},{"cell_type":"code","source":["def mergeSortedArray(arr1,arr2):\n","    len1 = len(arr1)\n","    len2 = len(arr2)\n","    merged_array = []\n","    len3 = len1 + len2\n","    merged_arr = np.zeros(len3 , dtype = int)\n","    a = 0\n","    b = 0\n","    c = 0\n","    while len1>a and len2>b:\n","        if arr1[a]>arr2[b]:\n","            merged_arr[c] = arr2[b]\n","            b += 1\n","        else:\n","            merged_arr[c] = arr1[a]\n","            a += 1\n","        c += 1\n","    while len1>a:\n","        merged_arr[c] = arr1[a]\n","        a += 1\n","        c += 1\n","    while len2>b:\n","        merged_arr[c] = arr2[b]\n","        b += 1\n","        c += 1\n","    return merged_arr\n","\n","\n","a1 = np.array([1, 2, 3])\n","print(f'Sorted Array 1: {a1}')\n","a2 = np.array([2, 5, 6])\n","print(f'Sorted Array 2: {a2}')\n","returned_value = mergeSortedArray(a1, a2)\n","print(f'Merged Sorted Array: {returned_value}\\n') # This should print [1, 2, 2, 3, 5, 6]\n","unittest.output_test(returned_value, np.array([1, 2, 2, 3, 5, 6]))\n","\n","print('\\n==================================\\n')\n","\n","a3 = np.array([1, 3, 5, 11])\n","print(f'Sorted Array 3: {a3}')\n","a4 = np.array([2, 7, 8])\n","print(f'Sorted Array 4: {a4}')\n","returned_value = mergeSortedArray(a3, a4)\n","print(f'Merged Sorted Array: {returned_value}\\n') # This should print [1, 2, 3, 5, 7, 8, 11]\n","unittest.output_test(returned_value, np.array([1, 2, 3, 5, 7, 8, 11]))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jt3Ncm8EohUq","executionInfo":{"status":"ok","timestamp":1740834985864,"user_tz":-360,"elapsed":87,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"fe212e01-666c-4169-b18f-5e8a5105d754"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted Array 1: [1 2 3]\n","Sorted Array 2: [2 5 6]\n","Merged Sorted Array: [1 2 2 3 5 6]\n","\n","Accepted\n","\n","==================================\n","\n","Sorted Array 3: [ 1  3  5 11]\n","Sorted Array 4: [2 7 8]\n","Merged Sorted Array: [ 1  2  3  5  7  8 11]\n","\n","Accepted\n"]}]},{"cell_type":"code","source":["def mostWater(arr):\n","  length_of_arr = len(arr)\n","  maximum_Area = 0\n","  i = 0 #counting from the left side\n","  j = length_of_arr-1  #counting from the right side\n","  while i < j:\n","    width = j - i  # calculating width pf the region\n","    if arr[i] < arr[j]: # calculating height\n","        height = arr[i]\n","    else:\n","        height = arr[j]\n","\n","    cointainer_Area = height * width # Area of a rectangular region\n","\n","    if maximum_Area < cointainer_Area: #if the calculated area is greater than our assumed max_Area,we update it\n","        maximum_Area = cointainer_Area\n","\n","    if arr[i]>arr[j]: #traversing the ith bar is larger than the jth bar, we tranverse 1 unit towards left\n","        j -= 1\n","    else:\n","        i += 1\n","  return maximum_Area\n","\n","\n","height = np.array([1,8,6,2,5,4,8,3,7])\n","print(f'Given Array: {height}')\n","\n","print(f'\\nExpected Output: 49')\n","print(f'Your Output: ',end='')\n","mostWater(height)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q_YTL2d8OC5t","executionInfo":{"status":"ok","timestamp":1740834985879,"user_tz":-360,"elapsed":13,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"0faf3cd2-1ca2-4aad-95ec-f9c8e4a91c39"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Array: [1 8 6 2 5 4 8 3 7]\n","\n","Expected Output: 49\n","Your Output: "]},{"output_type":"execute_result","data":{"text/plain":["49"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["class Node:\n","  def __init__(self,elem,next = None):\n","    self.elem,self.next = elem,next\n","\n","def createList(arr):\n","    head = Node(arr[0])\n","    tail = head\n","    for i in range(1,len(arr)):\n","        newNode = Node(arr[i])\n","        tail.next = newNode\n","        tail = newNode\n","    return head\n","\n","def printLinkedList(head):\n","    temp = head\n","    while temp != None:\n","        if temp.next != None:\n","            print(temp.elem, end = '-->')\n","        else:\n","            print(temp.elem)\n","        temp = temp.next\n","    print()"],"metadata":{"id":"QwR7Pd-5q3WV","executionInfo":{"status":"ok","timestamp":1740834985884,"user_tz":-360,"elapsed":2,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A3zQYwGNrR7n","executionInfo":{"status":"ok","timestamp":1740834986041,"user_tz":-360,"elapsed":154,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"4f23a6b3-e15f-43c8-efb3-51b2a034e320"},"outputs":[{"output_type":"stream","name":"stdout","text":["==============Test Case 1=============\n","Building 1:  Red-->Green-->Yellow-->Red-->Blue-->Green\n","\n","Building 2:  Red-->Green-->Yellow-->Red-->Blue-->Green\n","\n","Similar\n","Accepted\n","\n","==============Test Case 2=============\n","Building 1:  Red-->Green-->Yellow-->Red-->Yellow-->Green\n","\n","Building 2:  Red-->Green-->Yellow-->Red-->Blue-->Green\n","\n","Not Similar\n","Accepted\n","\n","==============Test Case 3=============\n","Building 1:  Red-->Green-->Yellow-->Red-->Blue-->Green\n","\n","Building 2:  Red-->Green-->Yellow-->Red-->Blue-->Green-->Blue\n","\n","Not Similar\n","Accepted\n","\n","==============Test Case 4=============\n","Building 1:  Red-->Green-->Yellow-->Red-->Blue-->Green-->Blue\n","\n","Building 2:  Red-->Green-->Yellow-->Red-->Blue-->Green\n","\n","Not Similar\n","Accepted\n","\n"]}],"source":["# TASK 3\n","\n","def check_similar(building_1, building_2):\n","    temp_b1 = building_1\n","    temp_b1_i = 0\n","    temp_b2 = building_2\n","    temp_b2_j = 0\n","\n","\n","    while temp_b1 != None and temp_b2 != None :\n","        temp_b1 = temp_b1.next\n","        temp_b1_i += 1\n","        temp_b2 = temp_b2.next\n","        temp_b2_j += 1\n","    temp_b1 = building_1\n","    temp_b2 = building_2\n","\n","    if temp_b1.elem != temp_b2.elem :\n","            return \"Not Similar\"\n","\n","    while temp_b1 != None and temp_b2 != None :\n","        if temp_b1.elem != temp_b2.elem :\n","            return \"Not Similar\"\n","        temp_b1 = temp_b1.next\n","        temp_b2 = temp_b2.next\n","\n","    if temp_b1 == None and temp_b2 == None:\n","        return \"Similar\"\n","    else:\n","        return \"Not Similar\"\n","\n","\n","\n","\n","\n","#[DO NOT MODIFY THE TESTER CODES BELOW]\n","#[THERE WILL BE 50% PENALTY IF IT'S MODIFIED]\n","print('==============Test Case 1=============')\n","building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))\n","building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))\n","print('Building 1: ', end = ' ')\n","printLinkedList(building_1)\n","print('Building 2: ', end = ' ')\n","printLinkedList(building_2)\n","returned_value = check_similar(building_1, building_2)\n","print(returned_value) #This should print 'Similar'\n","unittest.output_test(returned_value, 'Similar')\n","print()\n","\n","print('==============Test Case 2=============')\n","building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Yellow', 'Green']))\n","building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))\n","print('Building 1: ', end = ' ')\n","printLinkedList(building_1)\n","print('Building 2: ', end = ' ')\n","printLinkedList(building_2)\n","returned_value = check_similar(building_1, building_2)\n","print(returned_value) #This should print 'Not Similar'\n","unittest.output_test(returned_value, 'Not Similar')\n","print()\n","\n","print('==============Test Case 3=============')\n","building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))\n","building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green', 'Blue']))\n","print('Building 1: ', end = ' ')\n","printLinkedList(building_1)\n","print('Building 2: ', end = ' ')\n","printLinkedList(building_2)\n","returned_value = check_similar(building_1, building_2)\n","print(returned_value) #This should print 'Not Similar'\n","unittest.output_test(returned_value, 'Not Similar')\n","print()\n","\n","print('==============Test Case 4=============')\n","building_1 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green', 'Blue']))\n","building_2 = createList(np.array(['Red', 'Green', 'Yellow', 'Red', 'Blue', 'Green']))\n","print('Building 1: ', end = ' ')\n","printLinkedList(building_1)\n","print('Building 2: ', end = ' ')\n","printLinkedList(building_2)\n","returned_value = check_similar(building_1, building_2)\n","print(returned_value) #This should print 'Not Similar'\n","unittest.output_test(returned_value, 'Not Similar')\n","print()"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0c4bb65c-63b7-4aa5-9b8f-1e966904807f","id":"abOkMQ8_5cbF","executionInfo":{"status":"ok","timestamp":1740834986225,"user_tz":-360,"elapsed":183,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["==============Test Case 1=============\n","Original Conga Line:  10-->15-->34-->41-->56-->72\n","\n","True\n","Accepted\n","\n","==============Test Case 2=============\n","Original Conga Line:  10-->15-->44-->41-->56-->72\n","\n","False\n","Accepted\n","\n"]}],"source":["# TASK 4\n","\n","def assemble_conga_line(conga_line):\n","  temp = conga_line #storing the head of the conga line\n","  while temp  and temp.next  : #here loop will go on till our head (conga_line) and head.next(conga_line.next) is valid and not None\n","    if temp.elem >= temp.next.elem : #checking ascending order\n","        return False\n","    temp = temp.next #traversing through the main link list\n","  return True\n","\n","\n","\n","#[DO NOT MODIFY THE TESTER CODES BELOW]\n","#[THERE WILL BE 50% PENALTY IF IT'S MODIFIED]\n","print('==============Test Case 1=============')\n","conga_line = createList(np.array([10,15,34,41,56,72]))\n","print('Original Conga Line: ', end = ' ')\n","printLinkedList(conga_line)\n","returned_value = assemble_conga_line(conga_line)\n","print(returned_value) #This should print True\n","unittest.output_test(returned_value, True)\n","print()\n","print('==============Test Case 2=============')\n","conga_line = createList(np.array([10,15,44,41,56,72]))\n","print('Original Conga Line: ', end = ' ')\n","printLinkedList(conga_line)\n","returned_value = assemble_conga_line(conga_line)\n","print(returned_value) #This should print False\n","unittest.output_test(returned_value, False)\n","print()"]},{"cell_type":"code","source":["#task 5\n","\n","def sum_dist(head, arr):\n","  total_sum = 0\n","  i = 0\n","  array_size = len(arr)\n","\n","\n","  while i < array_size: #going through the length of our given array\n","    temp = head\n","    counter = 0\n","    while temp != None and counter < arr[i]: # iterating till temp become None and counter is less than size of array\n","        temp = temp.next\n","        counter += 1\n","    if temp != None:\n","        total_sum += temp.elem\n","    i+=1\n","  return total_sum\n","\n","\n","\n","\n","#[DO NOT MODIFY THE TESTER CODES BELOW]\n","#[THERE WILL BE 50% PENALTY IF IT'S MODIFIED]\n","print('==============Test Case 1=============')\n","LL1 = createList(np.array([10,16,-5,9,3,4]))\n","dist = np.array([2,0,5,2,8])\n","returned_value = sum_dist(LL1, dist)\n","print(f'Sum of Nodes: {returned_value}') #This should print Sum of Nodes: 4\n","unittest.output_test(returned_value, 4)\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IOjKLfaVJwJY","executionInfo":{"status":"ok","timestamp":1740835937222,"user_tz":-360,"elapsed":13,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"d58b9daf-cfa5-4dcf-de9f-98a49c4230e3"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["==============Test Case 1=============\n","Sum of Nodes: 4\n","Accepted\n","\n"]}]},{"cell_type":"code","source":["def sum_dist(head, arr):\n","  sum = 0\n","  i = 0\n","\n","\n","\n","\n","print('==============Test Case 1=============')\n","LL1 = createList(np.array([10,16,-5,9,3,4]))\n","dist = np.array([2,0,5,2,8])\n","returned_value = sum_dist(LL1, dist)\n","print(f'Sum of Nodes: {returned_value}') #This should print Sum of Nodes: 4\n","unittest.output_test(returned_value, 4)\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eX_JgA-cxlXA","executionInfo":{"status":"ok","timestamp":1740835505978,"user_tz":-360,"elapsed":13,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"641c736e-2c22-4519-bb10-aa606aa51819"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["==============Test Case 1=============\n","Sum of Nodes: 64\n","Not Accepted [Your output: 64  |  Expected Output: 4]\n","\n"]}]}]}