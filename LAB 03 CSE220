{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNKR8RqlPeiOFkygdpu0eqB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bt55Hyw_EaM_","executionInfo":{"status":"ok","timestamp":1742043318876,"user_tz":-360,"elapsed":5650,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"9dd09905-94ca-4d0a-9930-8185ec4d57cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting fhm-unittest\n","  Downloading fhm_unittest-1.0.1-py3-none-any.whl.metadata (1.9 kB)\n","Downloading fhm_unittest-1.0.1-py3-none-any.whl (2.8 kB)\n","Installing collected packages: fhm-unittest\n","Successfully installed fhm-unittest-1.0.1\n","Collecting fuzzywuzzy\n","  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n","Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n","Installing collected packages: fuzzywuzzy\n","Successfully installed fuzzywuzzy-0.18.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n","  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n"]}],"source":["! pip3 install fhm-unittest\n","! pip3 install fuzzywuzzy\n","import fhm_unittest as unittest\n","import numpy as np"]},{"cell_type":"code","source":["def print_matrix(m):\n","  row,col = m.shape\n","  for i in range(row):\n","    c = 1\n","    print('|', end='')\n","    for j in range(col):\n","      c += 1\n","      if(len(str(m[i][j])) == 1):\n","        print(' ',m[i][j], end = '  |')\n","        c += 6\n","      else:\n","        print(' ',m[i][j], end = ' |')\n","        c += 6\n","    print()\n","    print('-'*(c-col))"],"metadata":{"id":"oUgjlgevEhjZ","executionInfo":{"status":"ok","timestamp":1742043325426,"user_tz":-360,"elapsed":4,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Task 01: Zigzag Walk\n","\n","def walk_zigzag(floor):\n","#   row,col = m.shape\n","#   reverse_start_index = 5 #when even, it will be row, when odd it will be row-1\n","#   forward_traverse = True\n","#   starting_col = 0\n","#   while starting_col < col:\n","#     if forward_traverse:\n","    x = 0\n","    row = len(floor)\n","    col =  len(floor[0])\n","    y = 0\n","\n","    while y < col:\n","        if y % 2 == 0:\n","            x = 0\n","            while x < row:\n","                print(floor[x][y], end=\" \")\n","                x += 2\n","        else:\n","            if row % 2 == 0:\n","                x = row - 1\n","            else:\n","                x = row - 2\n","            while x >= 0:\n","                print(floor[x][y], end=\" \")\n","                x -= 2\n","        print()\n","\n","        y += 1\n","\n","\n","#DO NOT CHANGE THE CODE BELOW\n","floor = np.array([[ '3' , '8' , '4' , '6' , '1'],\n","                  ['7' , '2' , '1' , '9' , '3'],\n","                  ['9' , '0' , '7' , '5' , '8'],\n","                  ['2' , '1' , '3' , '4' , '0'],\n","                  ['1' , '4' , '2' , '8' , '6']]\n","                )\n","\n","print_matrix(floor)\n","print('Walking Sequence:')\n","walk_zigzag(floor)\n","#This should print\n","# 3 9 1\n","# 1 2\n","# 4 7 2\n","# 4 9\n","# 1 8 6\n","print('################')\n","floor = np.array([[ '3' , '8' , '4' , '6' , '1'],\n","                  ['7' , '2' , '1' , '9' , '3'],\n","                  ['9' , '0' , '7' , '5' , '8'],\n","                  ['2' , '1' , '3' , '4' , '0']]\n","                )\n","\n","print_matrix(floor)\n","print('Walking Sequence:')\n","walk_zigzag(floor)\n","#This should print\n","# 3 9\n","# 1 2\n","# 4 7\n","# 4 9\n","# 1 8"],"metadata":{"id":"9pMiK5jeElRz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742043327789,"user_tz":-360,"elapsed":18,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"4fff2440-04f7-4667-a168-de648284db4b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["|  3  |  8  |  4  |  6  |  1  |\n","-------------------------------\n","|  7  |  2  |  1  |  9  |  3  |\n","-------------------------------\n","|  9  |  0  |  7  |  5  |  8  |\n","-------------------------------\n","|  2  |  1  |  3  |  4  |  0  |\n","-------------------------------\n","|  1  |  4  |  2  |  8  |  6  |\n","-------------------------------\n","Walking Sequence:\n","3 9 1 \n","1 2 \n","4 7 2 \n","4 9 \n","1 8 6 \n","################\n","|  3  |  8  |  4  |  6  |  1  |\n","-------------------------------\n","|  7  |  2  |  1  |  9  |  3  |\n","-------------------------------\n","|  9  |  0  |  7  |  5  |  8  |\n","-------------------------------\n","|  2  |  1  |  3  |  4  |  0  |\n","-------------------------------\n","Walking Sequence:\n","3 9 \n","1 2 \n","4 7 \n","4 9 \n","1 8 \n"]}]},{"cell_type":"code","source":["#Task 02: Decryption Process\n","\n","def decrypt_matrix(matrix):\n","    dec = np.array([0] * len(matrix[0]))\n","    i = 0\n","    while i < len(matrix[0]):\n","        j = 0\n","        while j < len(matrix):\n","            dec[i] += matrix[j][i]\n","            j += 1\n","        i += 1\n","\n","    final = np.array([0] * (len(dec) - 1))\n","    i = 1\n","    while i < len(dec):\n","        final[i - 1] = dec[i] - dec[i - 1]\n","        i += 1\n","\n","    return final\n","\n","#DO NOT CHANGE THE CODE BELOW\n","matrix=np.array([[1,3,1],\n","                 [6,4,2],\n","                 [5,1,7],\n","                 [9,3,3],\n","                 [8,5,4]\n","                 ])\n","\n","returned_array=decrypt_matrix(matrix)\n","print(returned_array)\n","#This should print [-13, 1]"],"metadata":{"id":"uG3101miFqBj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742043319106,"user_tz":-360,"elapsed":179,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"f7d33761-dbec-49e5-ea42-befa292cdb90"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[-13   1]\n"]}]},{"cell_type":"code","source":["# Task 03: Row Rotation Policy of BRACU Classroom\n","def row_rotation(exam_week, seat_status):\n","    row = len(seat_status)\n","    col = len(seat_status[0])\n","    temp = np.array([\"AA\"] * col)\n","\n","    while exam_week != 1:\n","        i = 0\n","        while i < col:\n","            temp[i] = seat_status[row - 1][i]\n","            i += 1\n","\n","        x = row - 2\n","        while x >= 0:\n","            y = 0\n","            while y < col:\n","                seat_status[x + 1][y] = seat_status[x][y]\n","                y += 1\n","            x -= 1\n","\n","        i = 0\n","        while i < col:\n","            seat_status[0][i] = temp[i]\n","            i += 1\n","\n","        exam_week -= 1\n","\n","    print(\"\\n\\n\")\n","    print_matrix(seat_status)\n","\n","    x = 0\n","    while x < row:\n","        y = 0\n","        while y < col:\n","            if seat_status[x][y] == \"AA\":\n","                return (x + 1)\n","            y += 1\n","        x += 1\n","\n","\n","#DO NOT CHANGE THE CODE BELOW\n","seat_status = np.array([[ 'A' , 'B' , 'C' , 'D' , 'E'],\n","                  ['F' , 'G' , 'H' , 'I' , 'J'],\n","                  ['K' , 'L' , 'M' , 'N' , 'O'],\n","                  ['P' , 'Q' , 'R' , 'S' , 'T'],\n","                  ['U' , 'V' , 'W' , 'X' , 'Y'],\n","                  ['Z' , 'AA' , 'BB' , 'CC' , 'DD']])\n","exam_week=3\n","print_matrix(seat_status)\n","print()\n","\n","row_number=row_rotation(exam_week, seat_status) #This should print modified seat status after rotation and return the row number\n","print(f'Your friend AA will be on row {row_number}') #This should print Your friend AA will be on row 2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eEHqidJSs1y2","executionInfo":{"status":"ok","timestamp":1742043319107,"user_tz":-360,"elapsed":163,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"9b94caca-eb4b-49f8-b1e1-37ec485e205d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["|  A  |  B  |  C  |  D  |  E  |\n","-------------------------------\n","|  F  |  G  |  H  |  I  |  J  |\n","-------------------------------\n","|  K  |  L  |  M  |  N  |  O  |\n","-------------------------------\n","|  P  |  Q  |  R  |  S  |  T  |\n","-------------------------------\n","|  U  |  V  |  W  |  X  |  Y  |\n","-------------------------------\n","|  Z  |  AA |  BB |  CC |  DD |\n","-------------------------------\n","\n","\n","\n","\n","|  U  |  V  |  W  |  X  |  Y  |\n","-------------------------------\n","|  Z  |  AA |  BB |  CC |  DD |\n","-------------------------------\n","|  A  |  B  |  C  |  D  |  E  |\n","-------------------------------\n","|  F  |  G  |  H  |  I  |  J  |\n","-------------------------------\n","|  K  |  L  |  M  |  N  |  O  |\n","-------------------------------\n","|  P  |  Q  |  R  |  S  |  T  |\n","-------------------------------\n","Your friend AA will be on row 2\n"]}]},{"cell_type":"code","source":["#Task 04: Matrix Compression\n","\n","def compress_matrix(mat):\n","    ans = np.array([[0, 0], [0, 0]])\n","    row = len(mat)\n","    col = len(mat[0])\n","    r_m, c_m = row // 2, col // 2\n","\n","    i = 0\n","    while i < r_m:\n","        j = 0\n","        while j < c_m:\n","            ans[0][0] += mat[i][j]\n","            j += 1\n","        i += 1\n","\n","    i = 0\n","    while i < r_m:\n","        j = c_m\n","        while j < col:\n","            ans[0][1] += mat[i][j]\n","            j += 1\n","        i += 1\n","\n","    i = r_m\n","    while i < row:\n","        j = 0\n","        while j < c_m:\n","            ans[1][0] += mat[i][j]\n","            j += 1\n","        i += 1\n","\n","    i = r_m\n","    while i < row:\n","        j = c_m\n","        while j < col:\n","            ans[1][1] += mat[i][j]\n","            j += 1\n","        i += 1\n","\n","    return ans\n","\n","#DO NOT CHANGE THE CODE BELOW\n","matrix=np.array([[1,2,3,4],\n","                 [5,6,7,8],\n","                 [1,3,5,2],\n","                 [-2,0,6,-3]\n","                 ])\n","print_matrix(matrix)\n","print(\"...............\")\n","returned_array=compress_matrix(matrix)\n","print_matrix(returned_array)\n","#This should print\n","\n","#|  14  |  22 |\n","#--------------\n","#|  2  |  10  |\n","#--------------"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SDNskWr9s67F","executionInfo":{"status":"ok","timestamp":1742043319121,"user_tz":-360,"elapsed":16,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"66536c96-c723-4b5c-b159-1064061d2be8"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["|  1  |  2  |  3  |  4  |\n","-------------------------\n","|  5  |  6  |  7  |  8  |\n","-------------------------\n","|  1  |  3  |  5  |  2  |\n","-------------------------\n","|  -2 |  0  |  6  |  -3 |\n","-------------------------\n","...............\n","|  14 |  22 |\n","-------------\n","|  2  |  10 |\n","-------------\n"]}]},{"cell_type":"code","source":["#Task 05: Game Arena\n","\n","def play_game(arena):\n","\n","    count = 0\n","    i = 0\n","    while i < len(arena):\n","        j = 0\n","        while j < len(arena[0]):\n","            if arena[i][j] != 0 and arena[i][j] != 1 and arena[i][j] != 2:\n","                if i + 1 < len(arena) and arena[i + 1][j] == 2:\n","                    count += 1\n","                if i - 1 >= 0 and arena[i - 1][j] == 2:\n","                    count += 1\n","                if j + 1 < len(arena[0]) and arena[i][j + 1] == 2:\n","                    count += 1\n","                if j - 1 >= 0 and arena[i][j - 1] == 2:\n","                    count += 1\n","            j += 1\n","        i += 1\n","\n","    if count * 2 >= 10:\n","        print(f\"Points Gained: {count * 2}. Your team has survived the game.\")\n","    else:\n","        print(f\"Points Gained: {count * 2}. Your team is out.\")\n","\n","\n","\n","#DO NOT CHANGE THE CODE BELOW\n","arena=np.array([[0,2,2,0],\n","                [50,1,2,0],\n","                [2,2,2,0],\n","                [1,100,2,0]\n","                ])\n","print_matrix(arena)\n","play_game(arena)\n","#This should print\n","#Points Gained: 6. Your team is out.\n","print(\".....................\")\n","arena=np.array([[0,2,2,0,2],\n","                [1,50,2,1,100],\n","                [2,2,2,0,2],\n","                [0,200,2,0,0]\n","                ])\n","print_matrix(arena)\n","play_game(arena)\n","#This should print\n","#Points Gained: 14. Your team has survived the game."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zL8IZ11ks-b7","executionInfo":{"status":"ok","timestamp":1742043319135,"user_tz":-360,"elapsed":12,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"4104a5dd-7c79-4e1a-d83e-57622433c1ed"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["|  0  |  2  |  2  |  0  |\n","-------------------------\n","|  50 |  1  |  2  |  0  |\n","-------------------------\n","|  2  |  2  |  2  |  0  |\n","-------------------------\n","|  1  |  100 |  2  |  0  |\n","-------------------------\n","Points Gained: 6. Your team is out.\n",".....................\n","|  0  |  2  |  2  |  0  |  2  |\n","-------------------------------\n","|  1  |  50 |  2  |  1  |  100 |\n","-------------------------------\n","|  2  |  2  |  2  |  0  |  2  |\n","-------------------------------\n","|  0  |  200 |  2  |  0  |  0  |\n","-------------------------------\n","Points Gained: 14. Your team has survived the game.\n"]}]},{"cell_type":"code","source":["m = [\n","[1, 2, 3],\n","[4, 5, 6],\n","[7, 8, 9]\n","]\n","row = len(m)\n","col = len(m[0])\n","print(row)\n","print(col)\n","for i in range (row):\n","    for j in range(i+1, row):\n","        m[i][j], m[j][i] = m[j][i],m[i][j]\n","for j in range(row):\n","    for i in range(row//2):\n","        m[i][j],m[j][row-1-i] = m[j][row-1-i], m[i][j]\n","print (m)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2RouDrAh3iKi","executionInfo":{"status":"ok","timestamp":1742044082594,"user_tz":-360,"elapsed":33,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"ed1743ec-1434-4cec-b747-cee1002016a1"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","3\n","[[7, 8, 9], [2, 5, 4], [3, 6, 1]]\n"]}]},{"cell_type":"code","source":["def rotate_counter_clockwise(matrix):\n","    n = len(matrix)\n","\n","    # Step 1: Flip the matrix upside-down (swap rows)\n","    for i in range(n // 2):\n","        for j in range(n):\n","            temp = matrix[i][j]\n","            matrix[i][j] = matrix[n - 1 - i][j]\n","            matrix[n - 1 - i][j] = temp\n","\n","    # Step 2: Transpose the matrix (swap numbers diagonally)\n","    for i in range(n):\n","        for j in range(i + 1, n):\n","            temp = matrix[i][j]\n","            matrix[i][j] = matrix[j][i]\n","            matrix[j][i] = temp\n","\n","# Test the function\n","matrix = [\n","    [1, 2, 3],\n","    [4, 5, 6],\n","    [7, 8, 9]\n","]\n","\n","rotate_counter_clockwise(matrix)\n","\n","# Print the rotated matrix\n","for row in matrix:\n","    print(row)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O_6lAU-m8Tfj","executionInfo":{"status":"ok","timestamp":1742044484023,"user_tz":-360,"elapsed":19,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"d84d4937-8689-4808-b5e2-6d095290a787"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[7, 4, 1]\n","[8, 5, 2]\n","[9, 6, 3]\n"]}]},{"cell_type":"code","source":["def rotate_counter_clockwise(matrix):\n","    n = len(matrix)\n","\n","    # Step 1: Transpose the matrix (swap rows with columns)\n","    for i in range(n):\n","        for j in range(i + 1, n):\n","            temp = matrix[i][j]\n","            matrix[i][j] = matrix[j][i]\n","            matrix[j][i] = temp\n","\n","    # Step 2: Reverse each column (swap top and bottom elements)\n","    for j in range(n):  # Loop through each column\n","        for i in range(n // 2):  # Swap only halfway down\n","            temp = matrix[i][j]\n","            matrix[i][j] = matrix[n - i - 1][j]\n","            matrix[n - i - 1][j] = temp\n","\n","# Test case\n","matrix = [\n","    [1, 2, 3],\n","    [4, 5, 6],\n","    [7, 8, 9]\n","]\n","\n","rotate_counter_clockwise(matrix)\n","\n","# Print the rotated matrix\n","for row in matrix:\n","    print(row)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sx2hoG5w8u_J","executionInfo":{"status":"ok","timestamp":1742044593696,"user_tz":-360,"elapsed":43,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"0eaa48ec-889c-4ed4-aa32-28bc545a7fc8"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 6, 9]\n","[2, 5, 8]\n","[1, 4, 7]\n"]}]},{"cell_type":"code","source":["def decodeMessage(codeword):\n","    row,col = len(codeword), len(codeword[0])\n","    trace = \"\"\n","    for i in range(row):\n","        for j in range(col):\n","            if i == j:\n","                trace += codeword[i][j]\n","    result = \"\"  # To store the result without duplicates\n","    for char in trace:\n","        if char not in result:\n","            result += char\n","    print(f\"Possible Apartment Names: {result}\")\n","\n","# Test Case 1\n","codeword1 = [\n","    ['A', 'D', 'M', 'Q'],\n","    ['E', 'S', 'Y', 'K'],\n","    ['J', 'F', 'O', 'L'],\n","    ['P', 'X', 'J', 'A']\n","]\n","decodeMessage(codeword1)  # Expected output: Possible Apartment Names: S O\n","\n","# Test Case 2\n","codeword2 = [\n","    ['A', 'D', 'M', 'Q', 'F'],\n","    ['E', 'S', 'Y', 'K', 'W'],\n","    ['J', 'F', 'O', 'L', 'T'],\n","    ['P', 'X', 'J', 'S', 'Y'],\n","    ['V', 'R', 'K', 'G', 'P']\n","]\n","decodeMessage(codeword2)  # Expected output: Possible Apartment Names: A O P"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DvhSZx8x-CZo","executionInfo":{"status":"ok","timestamp":1742047731855,"user_tz":-360,"elapsed":56,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"8de322e2-589b-4bcb-9407-44ee6396a406"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Possible Apartment Names: ASO\n","Possible Apartment Names: ASOP\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dBitsYQ-Ivyg"},"execution_count":null,"outputs":[]}]}