{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMA/IRG3yd62EiEKqvdL+zx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"PLAsXfVnHMiZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1740913882866,"user_tz":-360,"elapsed":14696,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"432d2d94-dc15-449d-dc78-3e5df1e410d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting fhm-unittest\n","  Downloading fhm_unittest-1.0.1-py3-none-any.whl.metadata (1.9 kB)\n","Downloading fhm_unittest-1.0.1-py3-none-any.whl (2.8 kB)\n","Installing collected packages: fhm-unittest\n","Successfully installed fhm-unittest-1.0.1\n","Collecting fuzzywuzzy\n","  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n","Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n","Installing collected packages: fuzzywuzzy\n","Successfully installed fuzzywuzzy-0.18.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n","  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n"]}],"source":["# You must run this cell to install dependency\n","! pip3 install fhm-unittest\n","! pip3 install fuzzywuzzy\n","import fhm_unittest as unittest\n","import numpy as np"]},{"cell_type":"code","source":["#Run this cell\n","class Node:\n","  def __init__(self,elem,next = None):\n","    self.elem,self.next = elem,next\n","\n","def createList(arr):\n","  head = Node(arr[0])\n","  tail = head\n","  for i in range(1,len(arr)):\n","    newNode = Node(arr[i])\n","    tail.next = newNode\n","    tail = newNode\n","  return head\n","\n","def printLinkedList(head):\n","  temp = head\n","  while temp != None:\n","    if temp.next != None:\n","      print(temp.elem, end = '-->')\n","    else:\n","      print(temp.elem)\n","    temp = temp.next\n","  print()"],"metadata":{"id":"HYKD_TKBN6Ov"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def alternate_merge(head1, head2):\n","  t1 = head1\n","  t2 = head2\n","  merged_head = t1\n","  while t1 != None and t2 != None:\n","     t3 = t1.next\n","     t4 = t2.next\n","     t1.next = t2\n","     t2.next = t3\n","     t1 = t3\n","     t2 = t4\n","\n","  return merged_head\n","\n","print('==============Test Case 1=============')\n","head1 = createList(np.array([1,2,6,8,11]))\n","head2 = createList(np.array([5,7,3,9,4]))\n","\n","print(\"Linked List 1:\")\n","printLinkedList(head1)\n","print(\"Linked List 2:\")\n","printLinkedList(head2)\n","\n","head = alternate_merge(head1, head2)\n","print(\"Merged Linked List:\")\n","printLinkedList(head)    #This should print    1 --> 5 --> 2 --> 7 --> 6 --> 3 --> 8 --> 9 --> 11 --> 4\n","\n","\n","print('==============Test Case 2=============')\n","head1 = createList(np.array([5, 3, 2, -4]))\n","head2 = createList(np.array([-4, -6, 1]))\n","\n","print(\"Linked List 1:\")\n","printLinkedList(head1)\n","print(\"Linked List 2:\")\n","printLinkedList(head2)\n","\n","head = alternate_merge(head1, head2)\n","print(\"Merged Linked List:\")\n","printLinkedList(head)    #This should print    5 → -4 -> 3 → -6 -> 2 -> 1 -> -4\n","\n","\n","print('==============Test Case 3=============')\n","head1 = createList(np.array([4, 2, -2, -4]))\n","head2 = createList(np.array([8, 6, 5, -3]))\n","\n","print(\"Linked List 1:\")\n","printLinkedList(head1)\n","print(\"Linked List 2:\")\n","printLinkedList(head2)\n","\n","head = alternate_merge(head1, head2)\n","print(\"Merged Linked List:\")\n","printLinkedList(head)    #This should print   4-> 8 → 2-> 6 → -2 → 5 → -4 -> -3\n"],"metadata":{"id":"CW1wmiU2N-av","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1740913882963,"user_tz":-360,"elapsed":68,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"4a3870e6-aa2f-49ae-8893-2f13454f9d35"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["==============Test Case 1=============\n","Linked List 1:\n","1-->2-->6-->8-->11\n","\n","Linked List 2:\n","5-->7-->3-->9-->4\n","\n","Merged Linked List:\n","1-->5-->2-->7-->6-->3-->8-->9-->11-->4\n","\n","==============Test Case 2=============\n","Linked List 1:\n","5-->3-->2-->-4\n","\n","Linked List 2:\n","-4-->-6-->1\n","\n","Merged Linked List:\n","5-->-4-->3-->-6-->2-->1-->-4\n","\n","==============Test Case 3=============\n","Linked List 1:\n","4-->2-->-2-->-4\n","\n","Linked List 2:\n","8-->6-->5-->-3\n","\n","Merged Linked List:\n","4-->8-->2-->6-->-2-->5-->-4-->-3\n","\n"]}]},{"cell_type":"code","source":["def word_Decoder(head):\n","    i = 0\n","    temp = head\n","    extracted_head = Node(None)\n","    extracted_tail = extracted_head\n","\n","\n","    while temp != None:\n","        i += 1\n","        temp = temp.next\n","\n","    value = 13 % i\n","\n","    index = 0\n","    temp = head\n","    while temp != None:\n","        if index != 0 and index % value == 0:\n","            extracted_tail.next = Node(temp.elem)\n","            extracted_tail = extracted_tail.next\n","        temp = temp.next\n","        index += 1\n","\n","    prev = None\n","    curr = extracted_head.next\n","    while curr != None:\n","        next_node = curr.next\n","        curr.next = prev\n","        prev = curr\n","        curr = next_node\n","    reversed_head = prev\n","\n","    new_head = Node(None)\n","    dum = new_head\n","    curr = reversed_head\n","    while curr != None:\n","        dum.next = Node(curr.elem)\n","        dum = dum.next\n","        curr = curr.next\n","\n","    return new_head\n","print('==============Test Case 1=============')\n","head = createList(np.array(['B', 'M', 'D', 'T', 'N', 'O', 'A', 'P', 'S', 'C']))\n","print(\"Encoded Word:\")\n","printLinkedList(head) #This should print B→M→D→T→N→O→A→P→S→C\n","\n","result = word_Decoder(head)\n","print(\"Decoded Word:\")\n","printLinkedList(result)    #This should print None→C→A→T\n","\n","print('==============Test Case 2=============')\n","\n","head = createList(np.array(['Z', 'O', 'T', 'N', 'X']))\n","print(\"Encoded Word:\")\n","printLinkedList(head) #This should print Z→O→T→N→X\n","\n","result = word_Decoder(head)\n","print(\"Decoded Word:\")\n","printLinkedList(result)    #This should print None→N\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1mAWyjEeaap2","executionInfo":{"status":"ok","timestamp":1740929538336,"user_tz":-360,"elapsed":11,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"5eaab1c2-9d60-4a0d-c552-4182a8ab5977"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["==============Test Case 1=============\n","Encoded Word:\n","B-->M-->D-->T-->N-->O-->A-->P-->S-->C\n","\n","Decoded Word:\n","None-->C-->A-->T\n","\n","==============Test Case 2=============\n","Encoded Word:\n","Z-->O-->T-->N-->X\n","\n","Decoded Word:\n","None-->N\n","\n"]}]},{"cell_type":"code","source":["def idGenerator(head1, head2, head3):\n","    temp1 = head1\n","    i = 0\n","    prev = None\n","\n","    while temp1 != None and i < 4:\n","        next_node = temp1.next\n","        temp1.next = prev\n","        prev = temp1\n","        temp1 = next_node\n","        i += 1\n","\n","    final_head = prev\n","    final_tail = prev\n","\n","    while final_tail != None and final_tail.next != None:\n","        final_tail = final_tail.next\n","\n","    temp2 = head2\n","    temp3 = head3\n","    i = 0\n","\n","    while i < 4 and temp2 != None and temp3 != None:\n","        sum = temp2.elem + temp3.elem\n","        new_node = Node(sum % 10)\n","        if final_head == None:\n","            final_head = new_node\n","            final_tail = new_node\n","        else:\n","            final_tail.next = new_node\n","            final_tail = new_node\n","        temp2 = temp2.next\n","        temp3 = temp3.next\n","        i += 1\n","\n","    return final_head\n","\n","print('==============Test Case 1=============')\n","head1 = createList(np.array([0,3,2,2]))\n","head2 = createList(np.array([5,2,2,1]))\n","head3 = createList(np.array([4,3,2,1]))\n","\n","print(\"Linked List 1:\")\n","printLinkedList(head1)\n","print(\"Linked List 2:\")\n","printLinkedList(head2)\n","print(\"Linked List 3:\")\n","printLinkedList(head3)\n","\n","result = idGenerator(head1, head2, head3)\n","print(\"New ID:\")\n","printLinkedList(result)    #This should print  2 → 2 → 3 → 0 → 9 → 5 → 4 → 2\n","\n","\n","print('==============Test Case 2=============')\n","head1 = createList(np.array([0,3,9,1]))\n","head2 = createList(np.array([3,6,5,7]))\n","head3 = createList(np.array([2,4,3,8]))\n","\n","print(\"Linked List 1:\")\n","printLinkedList(head1)\n","print(\"Linked List 2:\")\n","printLinkedList(head2)\n","print(\"Linked List 3:\")\n","printLinkedList(head3)\n","\n","result = idGenerator(head1, head2, head3)\n","print(\"New ID:\")\n","printLinkedList(result)    #This should print 1 → 9 → 3 → 0 → 5 → 0 → 8 → 5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hNVDOoJ-jPeT","executionInfo":{"status":"ok","timestamp":1740915424919,"user_tz":-360,"elapsed":7,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"c0381a43-3060-48a2-813c-e02a97063a8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["==============Test Case 1=============\n","Linked List 1:\n","0-->3-->2-->2\n","\n","Linked List 2:\n","5-->2-->2-->1\n","\n","Linked List 3:\n","4-->3-->2-->1\n","\n","New ID:\n","2-->2-->3-->0-->9-->5-->4-->2\n","\n","==============Test Case 2=============\n","Linked List 1:\n","0-->3-->9-->1\n","\n","Linked List 2:\n","3-->6-->5-->7\n","\n","Linked List 3:\n","2-->4-->3-->8\n","\n","New ID:\n","1-->9-->3-->0-->5-->0-->8-->5\n","\n"]}]},{"cell_type":"code","source":["class Patient:\n","  #write a constructor\n","  def __init__(self, id, name, age, bloodgroup, next, prev):\n","    self.id = id\n","    self.name = name\n","    self.age = age\n","    self.bloodgroup = bloodgroup\n","    self.next = next\n","    self.prev = prev"],"metadata":{"id":"Bapk3JEk4TBI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class WRM:\n","\n","  def __init__(self):\n","    #Creating the dummy head\n","    self.dh = Patient(None,None,None,None,None,None)\n","    self.dh.next = self.dh\n","    self.dh.prev = self.dh\n","\n","  def registerPatient(self,id, name, age, bloodgroup):\n","\n","    new = Patient(id, name, age, bloodgroup,None,None)\n","    last = self.dh.prev\n","    last.next = new\n","    new.prev = last\n","    new.next = self.dh\n","    self.dh.prev = new\n","    print(f\"Patient {name} registered successfully.\")\n","\n","  def servePatient(self):\n","\n","    if self.dh == self.dh.next:\n","        print(\"No patients in the waiting room.\")\n","        return None\n","\n","    to_be_served = self.dh.next\n","    self.dh.next = to_be_served.next\n","    to_be_served.next.prev = self.dh\n","    print(f\"Patient {to_be_served.name} is being served.\")\n","    return to_be_served\n","\n","\n","  def showAllPatient(self):\n","    if self.dh == self.dh.next:\n","        print(\"No patients in the waiting room.\")\n","        return None\n","    temp = self.dh.next\n","    while temp != None:\n","        print(\"ID:\", temp.id, \"Name:\", temp.name, \"Age:\", temp.age, \"Blood Group:\", temp.bloodgroup)\n","        temp = temp.next\n","\n","\n","  def canDoctorGoHome(self):\n","    if self.dh.next == self.dh:\n","        print(\"The doctor can now go home.\")\n","    else:\n","        print(\"The doctor cannot go home now.\")\n","\n","  def cancelAll(self):\n","    self.dh = self.dh.next\n","    self.dh.prev = self.dh\n","    print(\"All patients canceled.\")\n","\n","  def ReverseTheLine(self):\n","    if self.dh == self.dh.next:\n","        print(\"No patient available to be reversed\")\n","    temp = self.dh.next\n","    previous_patient = self.dh\n","    while temp != None:\n","        next_node = temp.next\n","        temp.next = temp.prev\n","        temp.prev = next_node\n","        temp = next_node\n","    self.dh.next.prev = self.dh\n","    self.dh.next = previous_patient\n","    self.dh.prev = self.dh.next.prev\n","    print(\"The patient line is now reversed.\")\n","\n","\n","\n"],"metadata":{"id":"ffCyzR1w4X57"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"**Welcome to Waiting Room Management System**\")\n","\n","pw = WRM()\n","\n","while True:\n","    print(\"Menu:\")\n","    print(\"1. RegisterPatient()\")\n","    print(\"2. ServePatient()\")\n","    print(\"3. CancelAll()\")\n","    print(\"4. CanDoctorGoHome()\")\n","    print(\"5. ShowAllPatient()\")\n","    print(\"6. Exit\")\n","\n","    choice = input(\"Enter your choice: \")\n","\n","    if choice == '1':\n","        id = input(\"Enter Patient ID: \")\n","        name = input(\"Enter Patient Name: \")\n","        age = input(\"Enter Patient Age: \")\n","        bloodgroup = input(\"Enter Patient Blood Group: \")\n","        pw.registerPatient(id, name, age, bloodgroup)\n","\n","    elif choice == '2':\n","        pw.servePatient()\n","    elif choice == '3':\n","        pw.cancelAll()\n","    elif choice == '4':\n","        pw.canDoctorGoHome()\n","    elif choice == '5':\n","        pw.showAllPatient()\n","    elif choice == '6':\n","        print(\"Exiting the Waiting Room Management System. Goodbye!\")\n","        break\n","    else:\n","        print(\"Invalid choice. Please enter a choice between 1 to 6.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kBTsAnLqFpKi","executionInfo":{"status":"ok","timestamp":1740925136978,"user_tz":-360,"elapsed":133126,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"13f31beb-ae7d-4a25-f832-9a361c2b73d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["**Welcome to Waiting Room Management System**\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 1\n","Enter Patient ID: 1\n","Enter Patient Name: IRAM\n","Enter Patient Age: 21\n","Enter Patient Blood Group: 1\n","Patient IRAM registered successfully.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 1\n","Enter Patient ID: 2\n","Enter Patient Name: ALIF\n","Enter Patient Age: 22\n","Enter Patient Blood Group: O+\n","Patient ALIF registered successfully.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 1\n","Enter Patient ID: KABBO\n","Enter Patient Name: KABBO\n","Enter Patient Age: 22\n","Enter Patient Blood Group: B+\n","Patient KABBO registered successfully.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 2\n","Patient IRAM is being served.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 2\n","Patient ALIF is being served.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 2\n","Patient KABBO is being served.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 3\n","All patients canceled.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 4\n","The doctor cannot go home now.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 5\n","No patients in the waiting room.\n","Menu:\n","1. RegisterPatient()\n","2. ServePatient()\n","3. CancelAll()\n","4. CanDoctorGoHome()\n","5. ShowAllPatient()\n","6. Exit\n","Enter your choice: 6\n","Exiting the Waiting Room Management System. Goodbye!\n"]}]}]}